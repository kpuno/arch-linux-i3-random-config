<!DOCTYPE HTML>
<html lang="en-US" manifest="./manifest.appcache">
    
    <head>
        
        <meta charset="UTF-8">
        <title>Using events: Modules talking to modules | Human JavaScript</title>
        <meta content="text/html; charset=utf-8" http-equiv="Content-Type">
        <meta name="description" content="">
        <meta name="generator" content="GitBook 0.5.2">
        <meta name="HandheldFriendly" content="true"/>
        <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no">
        <meta name="apple-mobile-web-app-capable" content="yes">
        <meta name="apple-mobile-web-app-status-bar-style" content="black">
        <link rel="shortcut icon" href="gitbook/images/favicon.ico" type="image/x-icon">
        <script>
          (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
          (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
          m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
          })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
          ga('create', 'UA-1196801-11', 'auto');
          ga('send', 'pageview');
        </script>
        <script>
          !function(g,s,q,r,d){r=g[r]=g[r]||function(){(r.q=r.q||[]).push(
          arguments)};d=s.createElement(q);q=s.getElementsByTagName(q)[0];
          d.src='http://d1l6p2sc9645hc.cloudfront.net/tracker.js';q.parentNode.
          insertBefore(d,q)}(window,document,'script','_gs');
          _gs('GSN-555504-T', false);
          _gs('set', 'cookieDomain', '.humanjavascript.com');
          _gs('track');
        </script>
        
    
    
    <meta name="author" content="HenrikJoreteg">
    
    
    <link rel="next" href="./ch06-models.html" />
    
    
    <link rel="prev" href="./ch04-organizing-your-code.html" />
    

        
    </head>
    <body>
        
        
<link rel="stylesheet" href="gitbook/style.css">


        
    <div class="book" data-github="HenrikJoreteg/human-javascript" data-level="6" data-basepath="." data-revision="1428642973331">
    <div class="book-header">
    <!-- Actions Left -->
    <a href="#" class="btn pull-left toggle-summary" aria-label="Toggle summary"><i class="fa fa-align-justify"></i></a>
    <a href="#" class="btn pull-left toggle-search" aria-label="Toggle search"><i class="fa fa-search"></i></a>
    <span id="font-settings-wrapper">
        <a href="#" class="btn pull-left toggle-font-settings" aria-label="Toggle font settings"><i class="fa fa-font"></i>
        </a>
        <div class="dropdown-menu font-settings">
    <div class="dropdown-caret">
        <span class="caret-outer"></span>
        <span class="caret-inner"></span>
    </div>

    <div class="btn-group btn-block">
        <button id="reduce-font-size" class="btn btn-default">A</button>
        <button id="enlarge-font-size" class="btn btn-default">A</button>
    </div>

    <ul class="list-group font-family-list">
        <li class="list-group-item" data-font="0">Serif</li>
        <li class="list-group-item" data-font="1">Sans</li>
    </ul>

    <div class="btn-group btn-group-xs btn-block color-theme-list">
        <button type="button" class="btn btn-default" id="color-theme-preview-0" data-theme="0">White</button>
        <button type="button" class="btn btn-default" id="color-theme-preview-1" data-theme="1">Sepia</button>
        <button type="button" class="btn btn-default" id="color-theme-preview-2" data-theme="2">Night</button>
    </div>
</div>

    </span>

    <!-- Actions Right -->
    
    <a href="#" target="_blank" class="btn pull-right google-plus-sharing-link sharing-link" data-sharing="google-plus" aria-label="Share on Google Plus"><i class="fa fa-google-plus"></i></a>
    
    
    <a href="#" target="_blank" class="btn pull-right facebook-sharing-link sharing-link" data-sharing="facebook" aria-label="Share on Facebook"><i class="fa fa-facebook"></i></a>
    
    
    <a href="http://twitter.com/home?status=I'm%20reading%20Human%20JavaScript%20by%20%40HenrikJoreteg.%0A%0AA%20free%20online%20book%20on%20building%20sane%20JavaScript%20apps%3A%20http%3A%2F%2Fread.humanjavascript.com" target="_blank" class="btn pull-right twitter-sharing-link sharing-link" aria-label="Share on Twitter"><i class="fa fa-twitter"></i></a>
    

    <!-- Title -->
    <h1>
        <i class="fa fa-spinner fa-spin"></i>
        <a href="./" >Human JavaScript</a>
    </h1>
</div>

    

<div class="book-summary">
    <div class="book-search">
        <input type="text" placeholder="Search" class="form-control" />
    </div>
    <ul class="summary">
        <li>
            <a href="https://gumroad.com/l/humanjs" target="blank">Buy the e-book</a>
        </li>
        <li>
            <a href="http://learn.humanjavascript.com" target="blank">Video Tutorials</a>
        </li>
        <li>
            <a href="http://ampersandjs.com" target="blank">Ampersand.js</a>
        </li>
        <li>
            <a href="http://twitter.com/henrikjoreteg" target="blank">Follow @HenrikJoreteg</a>
        </li>

        <li class="divider"></li>

        <li data-level="0" data-path="index.html">
            <a href="./"><i class="fa fa-check"></i> Introduction</a>
        </li>
        
    
        <li class="chapter " data-level="1" data-path="ch00-foreword.html">
            
            <a href="./ch00-foreword.html">
                <i class="fa fa-check"></i> <b>1.</b> Foreword by Jan Lehnardt
            </a>
            
            
        </li>
    
        <li class="chapter " data-level="2" data-path="ch01-introduction.html">
            
            <a href="./ch01-introduction.html">
                <i class="fa fa-check"></i> <b>2.</b> Introduction
            </a>
            
            
        </li>
    
        <li class="chapter " data-level="3" data-path="ch02-the-big-decision.html">
            
            <a href="./ch02-the-big-decision.html">
                <i class="fa fa-check"></i> <b>3.</b> Client or server? Go big or go home.
            </a>
            
            
        </li>
    
        <li class="chapter " data-level="4" data-path="ch03-code-for-humans.html">
            
            <a href="./ch03-code-for-humans.html">
                <i class="fa fa-check"></i> <b>4.</b> Writing code for humans.
            </a>
            
            
        </li>
    
        <li class="chapter " data-level="5" data-path="ch04-organizing-your-code.html">
            
            <a href="./ch04-organizing-your-code.html">
                <i class="fa fa-check"></i> <b>5.</b> No more clientside spaghetti. Organizing your code.
            </a>
            
            
        </li>
    
        <li class="chapter " data-level="6" data-path="ch05-eventification.html">
            
            <a href="./ch05-eventification.html">
                <i class="fa fa-check"></i> <b>6.</b> Using events: Modules talking to modules
            </a>
            
            
        </li>
    
        <li class="chapter " data-level="7" data-path="ch06-models.html">
            
            <a href="./ch06-models.html">
                <i class="fa fa-check"></i> <b>7.</b> Models
            </a>
            
            
        </li>
    
        <li class="chapter " data-level="8" data-path="ch07-views.html">
            
            <a href="./ch07-views.html">
                <i class="fa fa-check"></i> <b>8.</b> Views and the DOM
            </a>
            
            
        </li>
    
        <li class="chapter " data-level="9" data-path="ch08-templating.html">
            
            <a href="./ch08-templating.html">
                <i class="fa fa-check"></i> <b>9.</b> Handling templates
            </a>
            
            
        </li>
    
        <li class="chapter " data-level="10" data-path="ch09-clientside-routing.html">
            
            <a href="./ch09-clientside-routing.html">
                <i class="fa fa-check"></i> <b>10.</b> Clientside Routing
            </a>
            
            
        </li>
    
        <li class="chapter " data-level="11" data-path="ch10-launch-sequence.html">
            
            <a href="./ch10-launch-sequence.html">
                <i class="fa fa-check"></i> <b>11.</b> 3... 2... 1... Blastoff!
            </a>
            
            
        </li>
    
        <li class="chapter " data-level="12" data-path="ch11-testing-and-QA.html">
            
            <a href="./ch11-testing-and-QA.html">
                <i class="fa fa-check"></i> <b>12.</b> Testing and QA
            </a>
            
            
        </li>
    
        <li class="chapter " data-level="13" data-path="ch12-settings-and-configs.html">
            
            <a href="./ch12-settings-and-configs.html">
                <i class="fa fa-check"></i> <b>13.</b> Settings and configs
            </a>
            
            
        </li>
    
        <li class="chapter " data-level="14" data-path="ch13-caveats.html">
            
            <a href="./ch13-caveats.html">
                <i class="fa fa-check"></i> <b>14.</b> Caveats/Gotchas
            </a>
            
            
        </li>
    
        <li class="chapter " data-level="15" data-path="ch14-conclusion.html">
            
            <a href="./ch14-conclusion.html">
                <i class="fa fa-check"></i> <b>15.</b> A few closing thoughts
            </a>
            
            
        </li>
    


        
        <li class="divider"></li>
        <li>
            <a href="http://www.gitbook.io/" target="blank" class="gitbook-link">Generated using GitBook</a>
        </li>
        
    </ul>
</div>

    <div class="book-body">
        <div class="body-inner">
            <div class="page-wrapper" tabindex="-1">
                <div class="book-progress">
    <div class="bar">
        <div class="inner" style="width: 40%;min-width: 33.333333333333336%;"></div>
    </div>
    <div class="chapters">
    
        <a href="./index.html" title="Introduction" class="chapter done new-chapter" data-progress="0" style="left: 0%;"></a>
    
        <a href="./ch00-foreword.html" title="Foreword by Jan Lehnardt" class="chapter done new-chapter" data-progress="1" style="left: 6.666666666666667%;"></a>
    
        <a href="./ch01-introduction.html" title="Introduction" class="chapter done new-chapter" data-progress="2" style="left: 13.333333333333334%;"></a>
    
        <a href="./ch02-the-big-decision.html" title="Client or server? Go big or go home." class="chapter done new-chapter" data-progress="3" style="left: 20%;"></a>
    
        <a href="./ch03-code-for-humans.html" title="Writing code for humans." class="chapter done new-chapter" data-progress="4" style="left: 26.666666666666668%;"></a>
    
        <a href="./ch04-organizing-your-code.html" title="No more clientside spaghetti. Organizing your code." class="chapter done new-chapter" data-progress="5" style="left: 33.333333333333336%;"></a>
    
        <a href="./ch05-eventification.html" title="Using events: Modules talking to modules" class="chapter done new-chapter" data-progress="6" style="left: 40%;"></a>
    
        <a href="./ch06-models.html" title="Models" class="chapter  new-chapter" data-progress="7" style="left: 46.666666666666664%;"></a>
    
        <a href="./ch07-views.html" title="Views and the DOM" class="chapter  new-chapter" data-progress="8" style="left: 53.333333333333336%;"></a>
    
        <a href="./ch08-templating.html" title="Handling templates" class="chapter  new-chapter" data-progress="9" style="left: 60%;"></a>
    
        <a href="./ch09-clientside-routing.html" title="Clientside Routing" class="chapter  " data-progress="10" style="left: 66.66666666666667%;"></a>
    
        <a href="./ch10-launch-sequence.html" title="3... 2... 1... Blastoff!" class="chapter  " data-progress="11" style="left: 73.33333333333333%;"></a>
    
        <a href="./ch11-testing-and-QA.html" title="Testing and QA" class="chapter  " data-progress="12" style="left: 80%;"></a>
    
        <a href="./ch12-settings-and-configs.html" title="Settings and configs" class="chapter  " data-progress="13" style="left: 86.66666666666667%;"></a>
    
        <a href="./ch13-caveats.html" title="Caveats/Gotchas" class="chapter  " data-progress="14" style="left: 93.33333333333333%;"></a>
    
        <a href="./ch14-conclusion.html" title="A few closing thoughts" class="chapter  " data-progress="15" style="left: 100%;"></a>
    
    </div>
</div>

                <div class="page-inner">
                
                    <section class="normal" id="section-gitbook_8">
                    
                        <h1 id="using-events-modules-talking-to-modules">Using events: Modules talking to modules</h1>
<p>How do you keep your modules cleanly separated? Sometimes modules are dependent on other modules but we still want to be able to keep them loosely coupled? One good technique is triggering lots of events that can be used as hooks by other code. Many of the core components in Node are extensions of the EventEmitter class. This means you can register handlers that get called when events happen to that object, much like you would do in the browser when you want to register a click handler for an element on the page.</p>
<p>I find that developers often assume that events are kind of magical or special things in JavaScript, but they&#39;re not. In fact, building an event emitter from scratch is a really great learning exercise. They&#39;re really quite simple. You&#39;re just saying: &quot;Please call this function when this thing happens.&quot; Typically, you&#39;ll see code like this:</p>
<p>In browsers:</p>
<pre><code class="lang-javascript">document.getElementById(<span class="hljs-string">'something'</span>).addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> {</span> ... }, <span class="hljs-literal">false</span>);
</code></pre>
<p>In jQuery it looks like this:</p>
<pre><code class="lang-javascript">$(<span class="hljs-string">'#something'</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(event)</span> {</span> ... });
<span class="hljs-comment">// or</span>
$(<span class="hljs-string">'#something'</span>).on(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(event)</span> {</span> ... });
</code></pre>
<p>In EventEmitter it looks like this:</p>
<pre><code class="lang-javascript">myEventEmitter.on(<span class="hljs-string">'someEvent'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> {</span> ... });
</code></pre>
<p>But they all do the same thing: they store a reference to the function you handed it (usually by adding it to an array of functions internally). Then, when the event happens, they call all the functions in the relevant array with information about the event. That&#39;s it! No magic.</p>
<p>This pattern is really useful when building reusable components yourself. Exporting objects and classes that inherit from some type of event emitter means that the code using your module can specify what they care about, rather than the module having to know. </p>
<p>At points of interest within your module where you think some external source may care, you can just call <code>this.emit(&#39;someEventName&#39;, {some: &#39;data&#39;})</code> and if there are any handlers for that event, they&#39;ll be called.</p>
<p>There are lots of implementations of event emitters with various features. Features usually involve various ways of registering and unregistering event listeners. For example, you may want to register a handler that only gets called the first time an event happens. So for this many event handlers have a <code>once()</code> method alongside the <code>on()</code> method. In addition, some event handlers give you a way to listen to all events emitted by a certain object, or perhaps all events in a certain namespace. These features can be useful for logging out all events (so you can debug), or for proxying events from one event source to another object.</p>
<p>Browsers don&#39;t expose a base EventEmitter class we can just use, so for clientside code we need to include one in order to take advantage of this pattern.</p>
<p>We use a slightly modified version of a really awesome and lightweight one that was written by the LearnBoost guys: @<a href="https://twitter.com/tjholowaychuk" target="_blank">tjholowaychuk</a>, @<a href="https://twitter.com/rauchg" target="_blank">rauchg</a> and company. It&#39;s <a href="https://github.com/HenrikJoreteg/wildemitter" target="_blank">wildemitter</a> on my GitHub if you&#39;re curious. </p>
<p>Beyond standard <code>on()</code>, <code>off()</code> and <code>once()</code> methods it adds two main features:</p>
<ol>
<li><p>Wildcard event handlers for listening to all events in an object. For example: <code>emitter.on(&#39;*&#39;, function (eventName, event) { ... })</code> or <code>emitter.on(&#39;namespace*&#39;, function (eventName, event) { ... })</code>.</p>
</li>
<li><p>Grouped event handlers, meaning you can specify which group the handlers are a part of when you register them and then unregister all the handlers in the group at once:</p>
</li>
</ol>
<pre><code class="lang-javascript"><span class="hljs-keyword">var</span> WildEmitter = <span class="hljs-built_in">require</span>(<span class="hljs-string">'wildemitter'</span>);

<span class="hljs-keyword">var</span> emitter = <span class="hljs-keyword">new</span> WildEmitter();

<span class="hljs-comment">// Register one handler </span>
emitter.on(<span class="hljs-string">'something'</span>, <span class="hljs-string">'group1'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> {</span> ... });
<span class="hljs-comment">// Register another handler in the same group</span>
emitter.on(<span class="hljs-string">'someOtherEvent'</span>, <span class="hljs-string">'group1'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> {</span> ... });

<span class="hljs-comment">// Then release both of them</span>
emitter.releaseGroup(<span class="hljs-string">'group1'</span>);
</code></pre>
<p>Details and implementations aside the same basic concepts of adding and removing handlers are available in all event emitters.</p>
<p>As an example, here&#39;s a simplified version of the <code>andbang.js</code> library which is an SDK for talking to the And Bang API.</p>
<pre><code class="lang-javascript"><span class="hljs-comment">// Require our emitter</span>
<span class="hljs-keyword">var</span> Emitter = <span class="hljs-built_in">require</span>(<span class="hljs-string">'wildemitter'</span>);

<span class="hljs-comment">// Our main constructor function</span>
<span class="hljs-keyword">var</span> AndBang = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(config)</span> {</span>
  <span class="hljs-comment">// extend with emitter</span>
  Emitter.call(<span class="hljs-keyword">this</span>);
};

<span class="hljs-comment">// Inherit from emitter, but retain constructor</span>
AndBang.prototype = <span class="hljs-built_in">Object</span>.create(Emitter.prototype, {
  constructor: {
    value: AndBang
  }
});

 <span class="hljs-comment">// Other methods</span>
AndBang.prototype.setName = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(newName)</span> {</span>
  <span class="hljs-keyword">this</span>.name = newName;
  <span class="hljs-comment">// We can trigger arbitrary events</span>
  <span class="hljs-comment">// these are just hooks that other</span>
  <span class="hljs-comment">// code could chose to listen to.</span>
  <span class="hljs-keyword">this</span>.emit(<span class="hljs-string">'nameChanged'</span>, newName);
};

<span class="hljs-comment">// Export it to the world</span>
module.exports = AndBang;
</code></pre>
<p>Then, other code that wants to use this module can listen for events like so:</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">var</span> AndBang = <span class="hljs-built_in">require</span>(<span class="hljs-string">'andbang'</span>);
<span class="hljs-keyword">var</span> api = <span class="hljs-keyword">new</span> AndBang();

<span class="hljs-comment">// Now this handler will get called any time the event gets triggered</span>
api.on(<span class="hljs-string">'nameChanged'</span>,  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(newName)</span> {</span> <span class="hljs-comment">/* do something cool */</span> });
</code></pre>
<p>This pattern makes it easy to expose functionality without needing overly specific knowledge about how it&#39;s going to be used.</p>

                    
                    </section>
                
                </div>
            </div>
        </div>

        
        <a href="./ch04-organizing-your-code.html" class="navigation navigation-prev " aria-label="Previous page: No more clientside spaghetti. Organizing your code."><i class="fa fa-angle-left"></i></a>
        
        
        <a href="./ch06-models.html" class="navigation navigation-next " aria-label="Next page: Models"><i class="fa fa-angle-right"></i></a>
        
    </div>
</div>

        
<script src="gitbook/jsrepl/jsrepl.js" id="jsrepl-script"></script>
<script src="gitbook/app.js"></script>

    
    <script src="http://cdn.mathjax.org/mathjax/2.0-latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
    

    
    <script src="gitbook/plugins/gitbook-plugin-mathjax/plugin.js"></script>
    

<script>
require(["gitbook"], function(gitbook) {
    var config = {};
    gitbook.start(config);
});
</script>

        
    </body>
    
</html>
