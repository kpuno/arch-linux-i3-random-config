<!DOCTYPE HTML>
<html lang="en-US" manifest="./manifest.appcache">
    
    <head>
        
        <meta charset="UTF-8">
        <title>Caveats/Gotchas | Human JavaScript</title>
        <meta content="text/html; charset=utf-8" http-equiv="Content-Type">
        <meta name="description" content="">
        <meta name="generator" content="GitBook 0.5.2">
        <meta name="HandheldFriendly" content="true"/>
        <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no">
        <meta name="apple-mobile-web-app-capable" content="yes">
        <meta name="apple-mobile-web-app-status-bar-style" content="black">
        <link rel="shortcut icon" href="gitbook/images/favicon.ico" type="image/x-icon">
        <script>
          (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
          (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
          m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
          })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
          ga('create', 'UA-1196801-11', 'auto');
          ga('send', 'pageview');
        </script>
        <script>
          !function(g,s,q,r,d){r=g[r]=g[r]||function(){(r.q=r.q||[]).push(
          arguments)};d=s.createElement(q);q=s.getElementsByTagName(q)[0];
          d.src='http://d1l6p2sc9645hc.cloudfront.net/tracker.js';q.parentNode.
          insertBefore(d,q)}(window,document,'script','_gs');
          _gs('GSN-555504-T', false);
          _gs('set', 'cookieDomain', '.humanjavascript.com');
          _gs('track');
        </script>
        
    
    
    <meta name="author" content="HenrikJoreteg">
    
    
    <link rel="next" href="./ch14-conclusion.html" />
    
    
    <link rel="prev" href="./ch12-settings-and-configs.html" />
    

        
    </head>
    <body>
        
        
<link rel="stylesheet" href="gitbook/style.css">


        
    <div class="book" data-github="HenrikJoreteg/human-javascript" data-level="14" data-basepath="." data-revision="1428642973331">
    <div class="book-header">
    <!-- Actions Left -->
    <a href="#" class="btn pull-left toggle-summary" aria-label="Toggle summary"><i class="fa fa-align-justify"></i></a>
    <a href="#" class="btn pull-left toggle-search" aria-label="Toggle search"><i class="fa fa-search"></i></a>
    <span id="font-settings-wrapper">
        <a href="#" class="btn pull-left toggle-font-settings" aria-label="Toggle font settings"><i class="fa fa-font"></i>
        </a>
        <div class="dropdown-menu font-settings">
    <div class="dropdown-caret">
        <span class="caret-outer"></span>
        <span class="caret-inner"></span>
    </div>

    <div class="btn-group btn-block">
        <button id="reduce-font-size" class="btn btn-default">A</button>
        <button id="enlarge-font-size" class="btn btn-default">A</button>
    </div>

    <ul class="list-group font-family-list">
        <li class="list-group-item" data-font="0">Serif</li>
        <li class="list-group-item" data-font="1">Sans</li>
    </ul>

    <div class="btn-group btn-group-xs btn-block color-theme-list">
        <button type="button" class="btn btn-default" id="color-theme-preview-0" data-theme="0">White</button>
        <button type="button" class="btn btn-default" id="color-theme-preview-1" data-theme="1">Sepia</button>
        <button type="button" class="btn btn-default" id="color-theme-preview-2" data-theme="2">Night</button>
    </div>
</div>

    </span>

    <!-- Actions Right -->
    
    <a href="#" target="_blank" class="btn pull-right google-plus-sharing-link sharing-link" data-sharing="google-plus" aria-label="Share on Google Plus"><i class="fa fa-google-plus"></i></a>
    
    
    <a href="#" target="_blank" class="btn pull-right facebook-sharing-link sharing-link" data-sharing="facebook" aria-label="Share on Facebook"><i class="fa fa-facebook"></i></a>
    
    
    <a href="http://twitter.com/home?status=I'm%20reading%20Human%20JavaScript%20by%20%40HenrikJoreteg.%0A%0AA%20free%20online%20book%20on%20building%20sane%20JavaScript%20apps%3A%20http%3A%2F%2Fread.humanjavascript.com" target="_blank" class="btn pull-right twitter-sharing-link sharing-link" aria-label="Share on Twitter"><i class="fa fa-twitter"></i></a>
    

    <!-- Title -->
    <h1>
        <i class="fa fa-spinner fa-spin"></i>
        <a href="./" >Human JavaScript</a>
    </h1>
</div>

    

<div class="book-summary">
    <div class="book-search">
        <input type="text" placeholder="Search" class="form-control" />
    </div>
    <ul class="summary">
        <li>
            <a href="https://gumroad.com/l/humanjs" target="blank">Buy the e-book</a>
        </li>
        <li>
            <a href="http://learn.humanjavascript.com" target="blank">Video Tutorials</a>
        </li>
        <li>
            <a href="http://ampersandjs.com" target="blank">Ampersand.js</a>
        </li>
        <li>
            <a href="http://twitter.com/henrikjoreteg" target="blank">Follow @HenrikJoreteg</a>
        </li>

        <li class="divider"></li>

        <li data-level="0" data-path="index.html">
            <a href="./"><i class="fa fa-check"></i> Introduction</a>
        </li>
        
    
        <li class="chapter " data-level="1" data-path="ch00-foreword.html">
            
            <a href="./ch00-foreword.html">
                <i class="fa fa-check"></i> <b>1.</b> Foreword by Jan Lehnardt
            </a>
            
            
        </li>
    
        <li class="chapter " data-level="2" data-path="ch01-introduction.html">
            
            <a href="./ch01-introduction.html">
                <i class="fa fa-check"></i> <b>2.</b> Introduction
            </a>
            
            
        </li>
    
        <li class="chapter " data-level="3" data-path="ch02-the-big-decision.html">
            
            <a href="./ch02-the-big-decision.html">
                <i class="fa fa-check"></i> <b>3.</b> Client or server? Go big or go home.
            </a>
            
            
        </li>
    
        <li class="chapter " data-level="4" data-path="ch03-code-for-humans.html">
            
            <a href="./ch03-code-for-humans.html">
                <i class="fa fa-check"></i> <b>4.</b> Writing code for humans.
            </a>
            
            
        </li>
    
        <li class="chapter " data-level="5" data-path="ch04-organizing-your-code.html">
            
            <a href="./ch04-organizing-your-code.html">
                <i class="fa fa-check"></i> <b>5.</b> No more clientside spaghetti. Organizing your code.
            </a>
            
            
        </li>
    
        <li class="chapter " data-level="6" data-path="ch05-eventification.html">
            
            <a href="./ch05-eventification.html">
                <i class="fa fa-check"></i> <b>6.</b> Using events: Modules talking to modules
            </a>
            
            
        </li>
    
        <li class="chapter " data-level="7" data-path="ch06-models.html">
            
            <a href="./ch06-models.html">
                <i class="fa fa-check"></i> <b>7.</b> Models
            </a>
            
            
        </li>
    
        <li class="chapter " data-level="8" data-path="ch07-views.html">
            
            <a href="./ch07-views.html">
                <i class="fa fa-check"></i> <b>8.</b> Views and the DOM
            </a>
            
            
        </li>
    
        <li class="chapter " data-level="9" data-path="ch08-templating.html">
            
            <a href="./ch08-templating.html">
                <i class="fa fa-check"></i> <b>9.</b> Handling templates
            </a>
            
            
        </li>
    
        <li class="chapter " data-level="10" data-path="ch09-clientside-routing.html">
            
            <a href="./ch09-clientside-routing.html">
                <i class="fa fa-check"></i> <b>10.</b> Clientside Routing
            </a>
            
            
        </li>
    
        <li class="chapter " data-level="11" data-path="ch10-launch-sequence.html">
            
            <a href="./ch10-launch-sequence.html">
                <i class="fa fa-check"></i> <b>11.</b> 3... 2... 1... Blastoff!
            </a>
            
            
        </li>
    
        <li class="chapter " data-level="12" data-path="ch11-testing-and-QA.html">
            
            <a href="./ch11-testing-and-QA.html">
                <i class="fa fa-check"></i> <b>12.</b> Testing and QA
            </a>
            
            
        </li>
    
        <li class="chapter " data-level="13" data-path="ch12-settings-and-configs.html">
            
            <a href="./ch12-settings-and-configs.html">
                <i class="fa fa-check"></i> <b>13.</b> Settings and configs
            </a>
            
            
        </li>
    
        <li class="chapter " data-level="14" data-path="ch13-caveats.html">
            
            <a href="./ch13-caveats.html">
                <i class="fa fa-check"></i> <b>14.</b> Caveats/Gotchas
            </a>
            
            
        </li>
    
        <li class="chapter " data-level="15" data-path="ch14-conclusion.html">
            
            <a href="./ch14-conclusion.html">
                <i class="fa fa-check"></i> <b>15.</b> A few closing thoughts
            </a>
            
            
        </li>
    


        
        <li class="divider"></li>
        <li>
            <a href="http://www.gitbook.io/" target="blank" class="gitbook-link">Generated using GitBook</a>
        </li>
        
    </ul>
</div>

    <div class="book-body">
        <div class="body-inner">
            <div class="page-wrapper" tabindex="-1">
                <div class="book-progress">
    <div class="bar">
        <div class="inner" style="width: 93.33333333333333%;min-width: 86.66666666666667%;"></div>
    </div>
    <div class="chapters">
    
        <a href="./index.html" title="Introduction" class="chapter done new-chapter" data-progress="0" style="left: 0%;"></a>
    
        <a href="./ch00-foreword.html" title="Foreword by Jan Lehnardt" class="chapter done new-chapter" data-progress="1" style="left: 6.666666666666667%;"></a>
    
        <a href="./ch01-introduction.html" title="Introduction" class="chapter done new-chapter" data-progress="2" style="left: 13.333333333333334%;"></a>
    
        <a href="./ch02-the-big-decision.html" title="Client or server? Go big or go home." class="chapter done new-chapter" data-progress="3" style="left: 20%;"></a>
    
        <a href="./ch03-code-for-humans.html" title="Writing code for humans." class="chapter done new-chapter" data-progress="4" style="left: 26.666666666666668%;"></a>
    
        <a href="./ch04-organizing-your-code.html" title="No more clientside spaghetti. Organizing your code." class="chapter done new-chapter" data-progress="5" style="left: 33.333333333333336%;"></a>
    
        <a href="./ch05-eventification.html" title="Using events: Modules talking to modules" class="chapter done new-chapter" data-progress="6" style="left: 40%;"></a>
    
        <a href="./ch06-models.html" title="Models" class="chapter done new-chapter" data-progress="7" style="left: 46.666666666666664%;"></a>
    
        <a href="./ch07-views.html" title="Views and the DOM" class="chapter done new-chapter" data-progress="8" style="left: 53.333333333333336%;"></a>
    
        <a href="./ch08-templating.html" title="Handling templates" class="chapter done new-chapter" data-progress="9" style="left: 60%;"></a>
    
        <a href="./ch09-clientside-routing.html" title="Clientside Routing" class="chapter done " data-progress="10" style="left: 66.66666666666667%;"></a>
    
        <a href="./ch10-launch-sequence.html" title="3... 2... 1... Blastoff!" class="chapter done " data-progress="11" style="left: 73.33333333333333%;"></a>
    
        <a href="./ch11-testing-and-QA.html" title="Testing and QA" class="chapter done " data-progress="12" style="left: 80%;"></a>
    
        <a href="./ch12-settings-and-configs.html" title="Settings and configs" class="chapter done " data-progress="13" style="left: 86.66666666666667%;"></a>
    
        <a href="./ch13-caveats.html" title="Caveats/Gotchas" class="chapter done " data-progress="14" style="left: 93.33333333333333%;"></a>
    
        <a href="./ch14-conclusion.html" title="A few closing thoughts" class="chapter  " data-progress="15" style="left: 100%;"></a>
    
    </div>
</div>

                <div class="page-inner">
                
                    <section class="normal" id="section-gitbook_15">
                    
                        <h1 id="caveats-gotchas">Caveats/Gotchas</h1>
<h2 id="function-bindings">Function bindings</h2>
<p>The most common thing I see when teaching people JavaScript, even people who have been working with jQuery for a long time, is understanding how function execution works in JavaScript. </p>
<p>There are 4 ways to call a function in JavaScript:</p>
<ol>
<li>As a stand-alone function:</li>
</ol>
<pre><code class="lang-javascript"><span class="hljs-keyword">var</span> myFunction = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> {</span>
  console.log(<span class="hljs-string">'"this" is'</span>, <span class="hljs-keyword">this</span>);  
};

myFunction(); <span class="hljs-comment">// Will log out the `window` object (or global in Node)</span>
</code></pre>
<ol>
<li>As a property of an object:</li>
</ol>
<pre><code class="lang-javascript"><span class="hljs-keyword">var</span> obj = {};
obj.myFunction = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> {</span>
  console.log(<span class="hljs-string">'"this" is'</span>, <span class="hljs-keyword">this</span>);  
};

obj.myFunction(); <span class="hljs-comment">// Will log out the 'obj' object</span>

<span class="hljs-comment">// Now here's where it gets tricky (continuing the same code as above)</span>

<span class="hljs-keyword">var</span> myFunc = obj.myFunction;

myFunc(); <span class="hljs-comment">// What will this log out as its 'this'?</span>

<span class="hljs-comment">// the answer is the `window` object</span>
</code></pre>
<ol>
<li>Using call</li>
</ol>
<pre><code class="lang-js"><span class="hljs-keyword">var</span> myFunc = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> {</span> ... };

<span class="hljs-comment">// call with a specific context and any number of arguments</span>
myFunc.call({any: <span class="hljs-string">'object'</span>}, <span class="hljs-string">'someArgument'</span>, <span class="hljs-string">'someOther'</span>);
</code></pre>
<ol>
<li>Using apply</li>
</ol>
<pre><code class="lang-js"><span class="hljs-keyword">var</span> myFunc = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> {</span> ... };

<span class="hljs-comment">// apply an array of arguments</span>
myFunc.apply({any: <span class="hljs-string">'object'</span>}, [<span class="hljs-string">'someArgument'</span>, <span class="hljs-string">'someOther'</span>]);
</code></pre>
<p>So the question is why?</p>
<p>In JavaScript &quot;this&quot; isn&#39;t magic. It&#39;s just an object. It&#39;s whatever you tell it to be when you&#39;re calling the function. It&#39;s simply the context object for that function execution.</p>
<p>So in the case of the second example where we just do <code>myFunc();</code> we&#39;re not giving it anything to use as a context, so it uses the global object &quot;window&quot; because a function body will always have a &quot;this&quot; inside that represents the context of execution.</p>
<p>These are not problems JS developers are used to thinking about when building apps with jQuery. jQuery nearly always hands you the current element as the &#39;this&#39; for event handlers, etc. But...as soon as we start doing Backbone it trips people up a lot. The following is an example of what I see pretty much every person new to Backbone do:</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">var</span> Backbone = <span class="hljs-built_in">require</span>(<span class="hljs-string">'backbone'</span>),
    templates = <span class="hljs-built_in">require</span>(<span class="hljs-string">'templates'</span>);

module.exports = Backbone.View.extend({
  initialize: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> {</span>
    <span class="hljs-comment">// Register a handler so that anytime the model changes, </span>
    <span class="hljs-comment">// call the render function.</span>
    <span class="hljs-comment">// THIS WILL NOT WORK!</span>
    <span class="hljs-keyword">this</span>.model.on(<span class="hljs-string">'change'</span>, <span class="hljs-keyword">this</span>.render);
  }, 
  render: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">this</span>.$el.html(template.thing());
  }
});
</code></pre>
<p>The problem is that inside the render function, &quot;this&quot; won&#39;t be the Backbone view if it&#39;s triggered by a change in the model. You may say, &quot;Well we&#39;re specifying it as a property of something.&quot; In some ways, yes, you wrote <code>this.render</code> but you&#39;re actually just referencing the resulting function and giving the specific function, without context to the event registry.</p>
<p>In fact, what you&#39;re doing is no different than this:</p>
<pre><code class="lang-javascript"><span class="hljs-comment">// Register a handler so that anytime the model changes, </span>
<span class="hljs-comment">// call the render function.</span>
<span class="hljs-comment">// THIS WILL NOT WORK!</span>
<span class="hljs-keyword">var</span> render = <span class="hljs-keyword">this</span>.render;
<span class="hljs-keyword">this</span>.model.on(<span class="hljs-string">'change'</span>, render);
</code></pre>
<p>So, the render function doesn&#39;t have any context when you just provide a pointer to that function (even though the function may &#39;live&#39; on the view). </p>
<p>So, here&#39;s what you do. You can bind a function to a context before it&#39;s run like this. </p>
<pre><code class="lang-javascript"><span class="hljs-comment">// THIS will work as expected.</span>
<span class="hljs-comment">// Backbone's event system takes a third argument for the</span>
<span class="hljs-comment">// context to execute the function with.</span>
<span class="hljs-keyword">this</span>.model.on(<span class="hljs-string">'change'</span>, <span class="hljs-keyword">this</span>.render, <span class="hljs-keyword">this</span>);
</code></pre>
<p>This leads into the other two ways to execute a function:</p>
<pre><code class="lang-javascript">myFunction = <span class="hljs-keyword">var</span> myFunction = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> {</span>
  console.log(<span class="hljs-string">'"this" is'</span>, <span class="hljs-keyword">this</span>);  
};

<span class="hljs-keyword">var</span> someOtherContext = {
  name: <span class="hljs-string">'blah'</span>
};

<span class="hljs-comment">// Both of these will log out the 'someOtherContext' object</span>
myFunction.apply(someOtherContext); 
myFunction.call(someOtherContext);

<span class="hljs-comment">// In ES5 compliant (read modern) browsers you can also do this</span>
myFunction = myFunction.bind(someOtherContext);
myFunction(); <span class="hljs-comment">// "this" will be someOtherContext</span>

<span class="hljs-comment">// Or if you're using underscore it doesn't matter if you're</span>
<span class="hljs-comment">// in a modern browser or not. You can just do this:</span>

myFunction = _.bind(myFunction, someOtherContext);
myFunction(); <span class="hljs-comment">// For the same result</span>
</code></pre>
<p>That&#39;s function binding in a nutshell. It&#39;s really just info about how the language works. But it&#39;s such a common issue with people who are new to Backbone, or less familiar with JavaScript as a language that I figured it was worth explaining.</p>
<h2 id="gotchas-regarding-dom-manipulation-in-views-they-may-still-be-detached-">Gotchas regarding DOM manipulation in views (they may still be detached)</h2>
<p>Another common issue is understanding what <code>this.$()</code> does in views. </p>
<p>If you&#39;ve got a div in your template that looks like this: <code>&lt;div id=&quot;myDiv&quot;/&gt;</code> and we do this in the render function you&#39;ll have a problem:</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">var</span> Backbone = <span class="hljs-built_in">require</span>(<span class="hljs-string">'backbone'</span>);

module.exports = Backbone.View.extend({
  render: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">this</span>.$el.html(templates.myTemplate());
    <span class="hljs-comment">// Then you try to access that div like so:</span>
    $(<span class="hljs-string">'#myDiv'</span>).on(<span class="hljs-string">'click'</span>, <span class="hljs-keyword">this</span>.doSomething);

    <span class="hljs-comment">// ^^ myDiv won't be found! If the root element of this</span>
    <span class="hljs-comment">// view isn't already attached to the DOM.</span>
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;
  }
});
</code></pre>
<p>What many people don&#39;t know is that you can pass a second argument to the jQuery function <code>$(selector)</code> that is the DOM tree to look within. So if you did <code>$(&#39;#myDiv&#39;, this.el)</code> in the example above, it would always work. </p>
<p>Backbone tries to make things easy for us, rather than having to do that. Remember to always use <code>this.$()</code> instead of just <code>$()</code> within views. That&#39;s just a helper for passing the view&#39;s base element to the jQuery function. It&#39;s functionally equivalent to passing <code>this.el</code> as the second argument. </p>
<h2 id="failed-ajax-requests">Failed Ajax requests</h2>
<p>Inevitably with single page apps you have to deal with issues of bad connectivity, or issues of stale data and/or expired sessions.</p>
<p>If we&#39;re using RESTful JSON APIs we&#39;ll be making requests throughout the application&#39;s lifecycle. One approach is to stub out a global error handler for all Ajax requests. jQuery makes this fairly simple: <a href="http://api.jquery.com/ajaxError" target="_blank">http://api.jquery.com/ajaxError</a>. Often as part of an application&#39;s main view, I&#39;ll register a handler for global Ajax errors that pops up a dialog to show an appropriate message. </p>

                    
                    </section>
                
                </div>
            </div>
        </div>

        
        <a href="./ch12-settings-and-configs.html" class="navigation navigation-prev " aria-label="Previous page: Settings and configs"><i class="fa fa-angle-left"></i></a>
        
        
        <a href="./ch14-conclusion.html" class="navigation navigation-next " aria-label="Next page: A few closing thoughts"><i class="fa fa-angle-right"></i></a>
        
    </div>
</div>

        
<script src="gitbook/jsrepl/jsrepl.js" id="jsrepl-script"></script>
<script src="gitbook/app.js"></script>

    
    <script src="http://cdn.mathjax.org/mathjax/2.0-latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
    

    
    <script src="gitbook/plugins/gitbook-plugin-mathjax/plugin.js"></script>
    

<script>
require(["gitbook"], function(gitbook) {
    var config = {};
    gitbook.start(config);
});
</script>

        
    </body>
    
</html>
